class Charecter{
char name;
int hp;
int def;
Pos position;
vector <struct CharecterCardData> holdCard;
void 抽牌();
void move(string);
void heal(int);
void shield(int);
void attack(int);
void attack(int,int);
void 長休();
}
class Monster{
char name;
int hp;
int def;
Pos position;
int status[3];//hp atk range
vector <struct CharecterCardData> holdCard;
void 抽牌();
void move(string){
void Creature::move(std::string commandTemp) {
	int length = commandTemp.length();
	Pos *dir = new Pos[length];//代表第n步後的位置
	int *canMove = new int[length];//第n步是不是valid
	int maxIndex = length - 1;
	for (int i = 0; i < length; i++) {
		dir[i] = direction(commandTemp[i]);
		if (i == 0) {
			dir[i].col += position.col;
			dir[i].row += position.row;
		}
		else {
			dir[i].col += dir[i - 1].col;
			dir[i].row += dir[i - 1].row;
		}
		canMove[i] = isvalid(dir[i]);
		if (canMove[i] == 2) {//maxIndex=第一個2 - 1
			maxIndex = i - 1;
		}
	}
	while ((maxIndex > 0) && (canMove[maxIndex] != 0)) {//最後一格要是0//非0->maxIndex--;
		maxIndex--;
	}
	if (maxIndex != 0) {
		position = dir[maxIndex];
	}
	delete[] dir;
	delete[] canMove;
}
}
void heal(int);
void shield(int);
void attack(int);
void attack(int,int);
void 洗牌();
}
